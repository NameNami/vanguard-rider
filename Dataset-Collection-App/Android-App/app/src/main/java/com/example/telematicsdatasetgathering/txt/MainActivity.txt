// file: com/example/telematicsdatasetgathering/MainActivity.kt

package com.example.telematicsdatasetgathering

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Button
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.core.content.ContextCompat
import com.example.telematicsdatasetgathering.ui.theme.TelematicsDatasetGatheringTheme
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp
import java.text.DecimalFormat
import androidx.lifecycle.lifecycleScope // <-- ADD THIS IMPORT
import kotlinx.coroutines.launch // You will also need this
import androidx.activity.viewModels
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue


class MainActivity : ComponentActivity() {
    private val statsViewModel: StatsViewModel by viewModels()

    private var isServiceRunning by mutableStateOf(false)
    private var currentLabel by mutableStateOf(0)
    private val requestPermissionLauncher =
        registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted: Boolean ->
            if (isGranted) {
                startDataCollectionService()
            } else {
                // Handle the case where the user denies the permission.
                // You might want to show a rationale.
            }
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        val statsState = mutableStateOf(RealTimeStats())

        setContent {
            TelematicsDatasetGatheringTheme {
                // --- THE MAGIC BULLET: collectAsState ---
                // `collectAsState` is a special Composable function that collects
                // values from a Flow and represents the latest value as a State.
                // It automatically triggers recomposition whenever a new value arrives.
                // The `by` keyword unwraps the State object into a plain RealTimeStats object.
                val stats by statsViewModel.statsFlow.collectAsState()

                MainScreen(
                    statsViewModel = statsViewModel,
                    isServiceRunning = isServiceRunning,
                    currentLabel = currentLabel,
                    stats = stats, // <-- Pass the automatically updating stats
                    onStartClick = { checkPermissionsAndStartService() },
                    onStopClick = { stopDataCollectionService() },
                    onLabelChange = { newLabel ->
                        currentLabel = newLabel
                        changeCollectionLabel(newLabel)
                    }
                )
            }
        }
    }

    private fun checkPermissionsAndStartService() {
        when {
            ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) == PackageManager.PERMISSION_GRANTED -> {
                startDataCollectionService()
            }
            else -> {
                requestPermissionLauncher.launch(Manifest.permission.ACCESS_FINE_LOCATION)
            }
        }
    }



    private fun startDataCollectionService() {
        val serviceIntent = Intent(this, DataCollectionService::class.java).apply {
            // Tell the service to START
            action = DataCollectionService.ACTION_START
        }
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            // For modern Android, you MUST use startForegroundService
            startForegroundService(serviceIntent)
        } else {
            // For older Android, use the traditional startService
            startService(serviceIntent)
        }
        isServiceRunning = true
    }

    private fun stopDataCollectionService() {
        val serviceIntent = Intent(this, DataCollectionService::class.java).apply {
            // Tell the service to STOP
            action = DataCollectionService.ACTION_STOP
        }
        startService(serviceIntent) // Use startService to send stop command
        isServiceRunning = false
        currentLabel = 0 // Reset label on stop
    }

    private fun changeCollectionLabel(label: Int) {
        val serviceIntent = Intent(this, DataCollectionService::class.java).apply {
            // Tell the service to CHANGE THE LABEL
            action = DataCollectionService.ACTION_CHANGE_LABEL
            putExtra(DataCollectionService.EXTRA_LABEL, label)
        }
        startService(serviceIntent) // Use startService to deliver the new intent
    }
}


@Composable
fun MainScreen(
    statsViewModel: StatsViewModel,
    isServiceRunning: Boolean,
    currentLabel: Int,
    stats: RealTimeStats, // <-- Pass the latest stats to the UI
    onStartClick: () -> Unit,
    onStopClick: () -> Unit,
    onLabelChange: (Int) -> Unit
) {
    val labelMap = mapOf(
        0 to "Normal", 1 to "Harsh Brake", 2 to "Harsh Cornering",
        3 to "Pothole/Bump", 4 to "Accident (Sim.)", 5 to "Phone Fall"
    )

    // A simple formatter for the stats
    val decimalFormat = DecimalFormat("#.##")

    LazyColumn(
        modifier = Modifier.fillMaxSize().padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // --- Control Panel ---
        item {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                Button(onClick = onStartClick, enabled = !isServiceRunning) { Text("Start") }
                Button(onClick = onStopClick, enabled = isServiceRunning) { Text("Stop") }
            }
            Spacer(modifier = Modifier.height(16.dp))
            Text(
                text = if (isServiceRunning) "Status: Collecting" else "Status: Idle",
                style = MaterialTheme.typography.headlineSmall
            )
            if (isServiceRunning) {
                Text(
                    text = "Current Label: ${labelMap[currentLabel]}",
                    style = MaterialTheme.typography.titleMedium,
                    modifier = Modifier.padding(top = 8.dp)
                )
            }
            Spacer(modifier = Modifier.height(16.dp))
        }

        // --- Live Stats Display ---
        if (isServiceRunning) {
            item {
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
                ) {
                    Column(modifier = Modifier.padding(16.dp)) {
                        Text("Live Stats", style = MaterialTheme.typography.titleLarge, fontWeight = FontWeight.Bold)
                        Spacer(modifier = Modifier.height(8.dp))
                        StatRow("Accel. Magnitude:", "${decimalFormat.format(stats.accMag)} m/sÂ²")
                        StatRow("Gyro. Magnitude:", "${decimalFormat.format(stats.gyroMag)} rad/s")
                        StatRow("Speed:", "${decimalFormat.format(stats.speed * 3.6)} km/h") // Convert m/s to km/h
                        StatRow("Latitude:", "${stats.latitude}")
                        StatRow("Longitude:", "${stats.longitude}")
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))
            }
        }

        // --- Label Buttons ---
        if (isServiceRunning) {
            item {
                Text("--- Tap to Label Event ---", style = MaterialTheme.typography.titleLarge)
                Spacer(modifier = Modifier.height(16.dp))
            }

            val labelItems = labelMap.toList()
            items(
                count = labelItems.size, // Explicitly tell the function how many items there are
                key = { index -> labelItems[index].first } // Optional: Use the ID as a stable key
            ) { index ->
                // Inside the lambda, 'index' is the current item's position (0, 1, 2...)
                // Use the index to get the data from your list
                val (labelId, labelName) = labelItems[index]

                Button(
                    onClick = { onLabelChange(labelId) },
                    modifier = Modifier
                        .fillMaxWidth(0.8f)
                        .padding(vertical = 4.dp)
                ) {
                    Text(labelName)
                }
            }
        }
    }
}

@Composable
fun StatRow(label: String, value: String) {
    Row(modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)) {
        Text(text = label, fontWeight = FontWeight.Bold, modifier = Modifier.weight(1f))
        Text(text = value, modifier = Modifier.weight(1f))
    }
}